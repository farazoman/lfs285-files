#/bin/bash

# 1. Create a nginx server
section_ns=accounting

cat > nginx-one.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
    name: nginx-one
    labels: 
        system: secondary
    namespace: $section_ns
spec:
    selector:
        matchLabels:
            system: secondary
    template:
        metadata:
            labels:
                system: secondary
        spec:
            containers:
            - image: nginx:1.20.1
              imagePullPolicy: Always
              name: nginx
              ports:
              - containerPort: 8080
                protocol: TCP
            nodeSelector:
                system: secondOne        
EOF

kubectl get nodes --show-labels
kubectl create -f nginx-one.yaml # should fail because 'accounting' ns dne
kubectl create ns $section_ns
kubectl create -f nginx-one.yaml

pod_name=$(kubectl get pod -o custom-columns=name:.metadata.name --no-headers -n $section_ns | head -n 1)
kubectl describe pod $pod_name -n $section_ns # should fail because of node affinity

# 2. Label the secondary node
kubectl label node ubu-wn system=secondOne
kubectl get nodes --show-labels
kubectl get pods -n $section_ns

kubectl get pods -l system=secondary -A

# 3. Expose the pod
kubectl -n $section_ns expose deploy nginx-one
kubectl get ep -n $section_ns
kubectl get svc -n $section_ns

# 4. Acccess the pod
curl 10.110.162.10:8080 # should get failed to connect
curl 10.110.162.10:80 # should timeout

curl 192.168.222.132:8080 # should get failed to connect
curl 192.168.222.132:80 # should get welcome page; why is this possible if we just exposed port 8080????

kubectl delete deploy -n $section_ns nginx-one

vim nginx-one.yaml # change port from 8080 to 80
kubectl create -f nginx-one.yaml
curl 10.110.162.10:80 # should work now

# 5. Expose with NodePort
kubectl -n $section_ns expose deploy nginx-one --type=NodePort --name=service-lab
kubectl -n $section_ns describe svc | grep unset # see the autogenerated port on the high side of the port range
# error in above cmd *might* be expected

# get url
kubectl cluster-info 
curl https://ubu-cp4:6443:32175
# it mentions something about using the public ip and curling that, but I'm running locally so the instructions are super clea
